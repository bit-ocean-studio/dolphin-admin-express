datasource db {
  provider = "postgresql"
  url      = env("PG_DB_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  output        = "./generated/pg"
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique @db.VarChar(30)
  password    String    @db.VarChar(255)
  email       String?   @unique @db.VarChar(30)
  phoneNumber String?   @map("phone_number") @db.VarChar(20)
  name        String?   @db.VarChar(30)
  firstName   String?   @map("first_name") @db.VarChar(30)
  lastName    String?   @map("last_name") @db.VarChar(30)
  nickName    String?   @map("nick_name") @db.VarChar(50)
  avatarUrl   String?   @map("avatar_url") @db.VarChar(1000)
  gender      Int?
  country     String?   @db.VarChar(50)
  province    String?   @db.VarChar(50)
  city        String?   @db.VarChar(50)
  address     String?   @db.Text
  biography   String?   @db.Text
  birthDate   DateTime? @map("birth_date") @db.Date
  verified    Boolean   @default(false)
  enabled     Boolean   @default(true)

  auths        Auth[] /// 用户授权
  userRoles    UserRole[] /// 用户角色
  userTraffics UserTraffic[] /// 用户访问记录

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)
  updatedBy Int?      @map("updated_by")
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  deletedBy Int?      @map("deleted_by")

  @@map("system_user")
}

model Auth {
  id       Int    @id @default(autoincrement())
  authType Int    @map("auth_type")
  openId   String @map("open_id")
  token    String @db.VarChar(255)
  data     Json?  @db.Json

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)
  updatedBy Int?      @map("updated_by")
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  deletedBy Int?      @map("deleted_by")

  @@unique([authType, openId])
  @@map("system_auth")
}

model Role {
  id        Int     @id @default(autoincrement())
  key       String  @unique @db.VarChar(50)
  nameEn    String? @map("name_en") @db.VarChar(50)
  nameZh    String? @map("name_zh") @db.VarChar(50)
  isBuiltIn Boolean @default(false) @map("is_built_in")
  enabled   Boolean @default(true)

  userRoles UserRole[]

  rolePermissions RolePermission[]

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)
  updatedBy Int?      @map("updated_by")
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  deletedBy Int?      @map("deleted_by")

  @@map("system_role")
}

model UserRole {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)
  updatedBy Int?      @map("updated_by")
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  deletedBy Int?      @map("deleted_by")

  @@map("system_user_role")
}

model Permission {
  id        Int     @id @default(autoincrement())
  key       String  @unique @db.VarChar(50)
  nameEn    String? @map("name_en") @db.VarChar(50)
  nameZh    String? @map("name_zh") @db.VarChar(50)
  isBuiltIn Boolean @default(false) @map("is_built_in")
  enabled   Boolean @default(true)

  rolePermissions RolePermission[]

  menuItems MenuItem[]

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)
  updatedBy Int?      @map("updated_by")
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  deletedBy Int?      @map("deleted_by")

  @@map("system_permission")
}

model RolePermission {
  id Int @id @default(autoincrement())

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)
  updatedBy Int?      @map("updated_by")
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  deletedBy Int?      @map("deleted_by")

  @@map("system_role_permission")
}

model Setting {
  id Int @id @default(autoincrement())

  key         String  @unique @db.VarChar(255)
  value       Json?   @db.Json
  description String? @db.Text
  enabled     Boolean @default(true)

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)
  updatedBy Int?      @map("updated_by")
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  deletedBy Int?      @map("deleted_by")

  @@map("system_setting")
}

model MenuItem {
  id        Int     @id @default(autoincrement())
  key       String  @unique @db.VarChar(50)
  nameEn    String? @map("name_en") @db.VarChar(50)
  nameZh    String? @map("name_zh") @db.VarChar(50)
  url       String? @db.VarChar(255)
  icon      String? @db.VarChar(50)
  type      Int?
  enabled   Boolean @default(true)
  sortOrder Int?    @default(0) @map("sort_order")
  remark    String? @db.Text

  parent   MenuItem? @relation("MenuItemToMenuItem", fields: [parentId], references: [id])
  parentId Int?      @map("parent_id")

  children MenuItem[] @relation("MenuItemToMenuItem")

  permission   Permission? @relation(fields: [permissionId], references: [id])
  permissionId Int?        @map("permission_id")

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  createdBy Int?      @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)
  updatedBy Int?      @map("updated_by")
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  deletedBy Int?      @map("deleted_by")

  @@map("system_menu_item")
}

/// 用户流量记录
model UserTraffic {
  id        Int       @id @default(autoincrement()) /// 唯一 ID
  app       String?   @db.VarChar(50) /// 应用名称
  version   String?   @db.VarChar(50) /// 应用版本
  env       String?   @db.VarChar(50) /// 应用环境
  source    String?   @db.VarChar(50) /// 访问来源（例如：GitHub、Google）
  userAgent String?   @map("user_agent") @db.VarChar(1000) /// 用户代理
  ip        String?   @db.VarChar(50) /// 用户 IP
  area      String?   @db.VarChar(255) /// 用户地区
  longitude Float? /// 经度
  latitude  Float? /// 纬度
  altitude  Float? /// 海拔
  enterAt   DateTime? @map("enter_at") @db.Timestamptz(3) /// 进入页面时间
  leaveAt   DateTime? @map("leave_at") @db.Timestamptz(3) /// 离开页面时间
  duration  Int? /// 访问时长（毫秒）

  user   User @relation(fields: [userId], references: [id]) /// 用户
  userId Int  @map("user_id") /// 用户 ID

  userTrafficRecords UserTrafficRecord[] /// 访问记录

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3) // 创建时间
  createdBy Int?      @map("created_by") // 创建人
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3) // 更新时间
  updatedBy Int?      @map("updated_by") // 更新人
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3) // 删除时间
  deletedBy Int?      @map("deleted_by") // 删除人

  @@map("system_user_traffic")
}

/// 用户访问记录（用户访问路由的记录）
model UserTrafficRecord {
  id       Int       @id @default(autoincrement()) /// 唯一 ID
  title    String?   @db.VarChar(255) /// 路由标题
  url      String?   @db.VarChar(1000) /// 路由 URL
  path     String?   @db.VarChar(1000) /// 路由路径
  enterAt  DateTime? @map("enter_at") @db.Timestamptz(3) /// 进入路由时间
  leaveAt  DateTime? @map("leave_at") @db.Timestamptz(3) /// 离开路由时间
  duration Int? /// 停留时长（毫秒）

  userTraffic   UserTraffic @relation(fields: [userTrafficId], references: [id])
  userTrafficId Int         @map("user_traffic_id") /// 用户流量记录 ID

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3) // 创建时间
  createdBy Int?      @map("created_by") // 创建人
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3) // 更新时间
  updatedBy Int?      @map("updated_by") // 更新人
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3) // 删除时间
  deletedBy Int?      @map("deleted_by") // 删除人

  @@map("system_user_traffic_record")
}
